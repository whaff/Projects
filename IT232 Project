        import java.util.ArrayList;
        import java.util.List;
        import java.util.Scanner;
        
        class Course {
            private String title;
            private String instructor;
            private String area;
        
            // Constructor for creating a new Course
            public Course(String title, String instructor, String area) {
                this.title = title;
                this.instructor = instructor;
                this.area = area;
            }
        
            // Getter and Setter methods for each attribute
            public String getTitle() { return title; }
            public void setTitle(String title) { this.title = title; }
        
            public String getInstructor() { return instructor; }
            public void setInstructor(String instructor) { this.instructor = instructor; }
        
            public String getArea() { return area; }
            public void setArea(String area) { this.area = area; }
        
            // Display course information
            public void displayCourseInfo() {
                System.out.println("Course Title: " + title + ", Instructor: " + instructor + ", Area: " + area);
            }
        }
        
        class Supervisor {
            private List<Course> courses; // Holds the list of all courses
        
            public Supervisor() {
                courses = new ArrayList<>();
                addSampleCourses(); // Initialize with sample data
            }
        
            // Adds initial sample courses to the system
            private void addSampleCourses() {
                courses.add(new Course("Java Programming", "Sultan Almeghlef", "Programming"));
                courses.add(new Course("Data Structures", "Abdullbasid Banga", "Computer Science"));
                courses.add(new Course("Web Development", "Fahad Mohammed", "Programming"));
                courses.add(new Course("Algorithms", "Abdullah rashed", "Computer Science"));
            }
        
            // Method to add a new course to the system
            public void addCourse(String title, String instructor, String area) {
                courses.add(new Course(title, instructor, area));
                System.out.println("Course added successfully.");
            }
        
            // Display all available courses
            public void displayCourses() {
                if (courses.isEmpty()) {
                    System.out.println("No courses available.");
                } else {
                    for (Course course : courses) {
                        course.displayCourseInfo();
                    }
                }
            }
        
            // Search for courses by title or instructor
            public void searchCourse(String keyword) {
                boolean found = false;
                for (Course course : courses) {
                    if (course.getTitle().equalsIgnoreCase(keyword) || course.getInstructor().equalsIgnoreCase(keyword)) {
                        course.displayCourseInfo();
                        found = true;
                    }
                }
                if (!found) {
                    System.out.println("No course found with the specified title or instructor.");
                }
            }
        
            // Display courses based on their area of study
            public void displayCoursesByArea(String area) {
                boolean found = false;
                for (Course course : courses) {
                    if (course.getArea().equalsIgnoreCase(area)) {
                        course.displayCourseInfo();
                        found = true;
                    }
                }
                if (!found) {
                    System.out.println("No courses available in the specified area.");
                }
            }
        }
        
        public class CourseManagementSystem {
            private static Supervisor supervisor = new Supervisor();
        
            public static void main(String[] args) {
                Scanner scanner = new Scanner(System.in);
                boolean exitProgram = false;
        
                System.out.println("Welcome to the Course Management System!");
        
                // Main menu loop
                while (!exitProgram) {
                    System.out.println("\nPlease choose an option:");
                    System.out.println("1. Add a Course (Supervisor)");
                    System.out.println("2. Display All Courses");
                    System.out.println("3. Search for a Course by Title or Instructor");
                    System.out.println("4. Display Courses by Area");
                    System.out.println("5. Exit");
                    System.out.print("Enter your choice: ");
        
                    // Handle input choice
                    int choice = Integer.parseInt(scanner.nextLine());
        
                    switch (choice) {
                        case 1:
                            // Collect course details for adding a new course
                            System.out.print("Enter Course Title: ");
                            String title = scanner.nextLine();
                            System.out.print("Enter Instructor Name: ");
                            String instructor = scanner.nextLine();
                            System.out.print("Enter Course Area: ");
                            String area = scanner.nextLine();
                            supervisor.addCourse(title, instructor, area);
                            break;
        
                        case 2:
                            supervisor.displayCourses();
                            break;
        
                        case 3:
                            // Prompt user for keyword to search
                            System.out.print("Enter Course Title or Instructor to search: ");
                            String keyword = scanner.nextLine();
                            supervisor.searchCourse(keyword);
                            break;
        
                        case 4:
                            // Prompt user for area to filter courses
                            System.out.print("Enter Area to display relevant courses: ");
                            String searchArea = scanner.nextLine();
                            supervisor.displayCoursesByArea(searchArea);
                            break;
        
                        case 5:
                            exitProgram = true;
                            System.out.println("Exiting the Course Management System. Goodbye!");
                            break;
        
                        default:
                            System.out.println("Invalid option, please try again.");
                    }
                }
                scanner.close();
            }
        }
        
